!function (I) { "use strict"; let x = !1; try { var e = Object.defineProperty({}, "passive", { get: function () { x = !0 } }); window.addEventListener("test", null, e) } catch (e) { } let t = null; function r() { return "rtl" === (null === t && (t = getComputedStyle(document.body).direction), t) } I(function () { function k(e, i) { e = I(e); let o = null; function t(e) { e = e.originalEvent, o = 1 === e.touches.length ? { target: e.currentTarget, touch: e.changedTouches[0], timestamp: (new Date).getTime() } : null } function n(e) { var t, n, s = e.originalEvent; o && 1 === s.changedTouches.length && s.changedTouches[0].identity === o.touch.identity && (t = (new Date).getTime(), n = s.changedTouches[0], n = Math.abs(Math.sqrt(Math.pow(o.touch.screenX - n.screenX, 2) + Math.pow(o.touch.screenY - n.screenY, 2))), o.target === s.currentTarget && t - o.timestamp < 500 && n < 10 && i(e)) } return e.on("touchstart", t), e.on("touchend", n), 1 } function s() { const t = function (e) { e.preventDefault(), document.removeEventListener("click", t) }; document.addEventListener("click", t), setTimeout(function () { document.removeEventListener("click", t) }, 100) } I(".topbar-dropdown__btn").on("click", function () { I(this).closest(".topbar-dropdown").toggleClass("topbar-dropdown--opened") }), document.addEventListener("click", function (e) { I(".topbar-dropdown").not(I(e.target).closest(".topbar-dropdown")).removeClass("topbar-dropdown--opened") }, !0), k(document, function (e) { I(".topbar-dropdown").not(I(e.target).closest(".topbar-dropdown")).removeClass("topbar-dropdown--opened") }), I(".search").each(function (e, t) { let n; const s = I(t), i = s.find(".search__categories"), o = s.find(".search__input"), r = s.find(".search__suggestions"); function a(e) { e && r.html(e), s.toggleClass("search--has-suggestions", !!e) } t = function (e) { I(document.activeElement).closest(".search").is(s) || s.not(I(e.target).closest(".search")).removeClass("search--suggestions-open") }; s.on("focusout", function () { setTimeout(function () { document.activeElement !== document.body && s.not(I(document.activeElement).closest(".search")).removeClass("search--suggestions-open") }, 10) }), o.on("input", function () { n && n.abort(), o.val() ? n = I.ajax({ url: "suggestions.html", success: function (e) { n = null, a(e) } }) : a("") }), o.on("focus", function () { s.addClass("search--suggestions-open") }), i.on("focus", function () { s.removeClass("search--suggestions-open") }), document.addEventListener("click", t, !0), k(document, t), o.is(document.activeElement) && o.trigger("focus").trigger("input") }); const t = I(".mobile-header__search"); function e(e) { this.element = I(e), this.items = this.element.find(".nav-links__item"), this.currentItem = null, this.element.data("navLinksInstance", this), this.onMouseenter = this.onMouseenter.bind(this), this.onMouseleave = this.onMouseleave.bind(this), this.onGlobalTouchClick = this.onGlobalTouchClick.bind(this), this.onTouchClick = this.onTouchClick.bind(this), this.items.on("mouseenter", this.onMouseenter), this.items.on("mouseleave", this.onMouseleave), k(document, this.onGlobalTouchClick), k(this.items, this.onTouchClick) } function n(e) { this.element = I(e), this.container = this.element.find("> .menu__submenus-container"), this.items = this.element.find("> .menu__list > .menu__item"), this.currentItem = null, this.element.data("menuInstance", this), this.onMouseenter = this.onMouseenter.bind(this), this.onMouseleave = this.onMouseleave.bind(this), this.onTouchClick = this.onTouchClick.bind(this), this.items.on("mouseenter", this.onMouseenter), this.element.on("mouseleave", this.onMouseleave), k(this.items, this.onTouchClick) } function i(e) { this.element = I(e), this.dropdown = this.element.find(".indicator__dropdown"), this.button = this.element.find(".indicator__button"), this.trigger = null, this.element.data("indicatorInstance", this), this.element.hasClass("indicator--trigger--hover") ? this.trigger = "hover" : this.element.hasClass("indicator--trigger--click") && (this.trigger = "click"), this.onMouseenter = this.onMouseenter.bind(this), this.onMouseleave = this.onMouseleave.bind(this), this.onTransitionend = this.onTransitionend.bind(this), this.onClick = this.onClick.bind(this), this.onGlobalClick = this.onGlobalClick.bind(this), this.element.on("mouseenter", this.onMouseenter), this.element.on("mouseleave", this.onMouseleave), this.dropdown.on("transitionend", this.onTransitionend), this.button.on("click", this.onClick), I(document).on("click", this.onGlobalClick), k(document, this.onGlobalClick), this.element.find(".search__input").on("keydown", function (e) { if (27 === e.which) { const t = I(this).closest(".indicator").data("indicatorInstance"); t && t.close() } }) } t.length && (I(".indicator--mobile-search .indicator__button").on("click", function () { t.is(".mobile-header__search--open") ? t.removeClass("mobile-header__search--open") : (t.addClass("mobile-header__search--open"), t.find("input")[0].focus()) }), t.find(".search__button--type--close").on("click", function () { t.removeClass("mobile-header__search--open") }), document.addEventListener("click", function (e) { I(e.target).closest(".indicator--mobile-search, .mobile-header__search").length || t.removeClass("mobile-header__search--open") }, !0)), e.prototype.onGlobalTouchClick = function (e) { this.element.not(I(e.target).closest(".nav-links")).length && this.unsetCurrentItem() }, e.prototype.onTouchClick = function (e) { if (e.cancelable) { const t = I(e.currentTarget); this.currentItem && this.currentItem.is(t) || this.hasSubmenu(t) && (e.preventDefault(), this.currentItem && this.currentItem.trigger("mouseleave"), t.trigger("mouseenter")) } }, e.prototype.onMouseenter = function (e) { this.setCurrentItem(I(e.currentTarget)) }, e.prototype.onMouseleave = function () { this.unsetCurrentItem() }, e.prototype.setCurrentItem = function (e) { this.currentItem = e, this.currentItem.addClass("nav-links__item--hover"), this.openSubmenu(this.currentItem) }, e.prototype.unsetCurrentItem = function () { this.currentItem && (this.closeSubmenu(this.currentItem), this.currentItem.removeClass("nav-links__item--hover"), this.currentItem = null) }, e.prototype.hasSubmenu = function (e) { return !!e.children(".nav-links__submenu").length }, e.prototype.openSubmenu = function (e) { const t = e.children(".nav-links__submenu"); if (t.length) { t.addClass("nav-links__submenu--display"); var n = t.offset().top - I(window).scrollTop(), s = window.innerHeight; if (t.css("maxHeight", s - n - 20 + "px"), t.addClass("nav-links__submenu--open"), t.hasClass("nav-links__submenu--type--megamenu")) { const o = t.offsetParent(); var i = o.width(), s = t.width(); r() ? (n = i - (e.position().left + e.width()), n = Math.round(Math.min(n, i - s)), t.css("right", n + "px")) : (e = e.position().left, s = Math.round(Math.min(e, i - s)), t.css("left", s + "px")) } } }, e.prototype.closeSubmenu = function (e) { const t = e.children(".nav-links__submenu"); if (t.length && (t.removeClass("nav-links__submenu--display"), t.removeClass("nav-links__submenu--open"), t.css("maxHeight", ""), t && t.is(".nav-links__submenu--type--menu"))) { const n = t.find("> .menu").data("menuInstance"); n && n.unsetCurrentItem() } }, I(".nav-links").each(function () { new e(this) }), n.prototype.onMouseenter = function (e) { const t = I(e.currentTarget); this.currentItem && t.is(this.currentItem) || (this.unsetCurrentItem(), this.setCurrentItem(t)) }, n.prototype.onMouseleave = function () { this.unsetCurrentItem() }, n.prototype.onTouchClick = function (e) { e = I(e.currentTarget); this.currentItem && this.currentItem.is(e) || this.hasSubmenu(e) && (s(), this.unsetCurrentItem(), this.setCurrentItem(e)) }, n.prototype.setCurrentItem = function (e) { this.currentItem = e, this.currentItem.addClass("menu__item--hover"), this.openSubmenu(this.currentItem) }, n.prototype.unsetCurrentItem = function () { this.currentItem && (this.closeSubmenu(this.currentItem), this.currentItem.removeClass("menu__item--hover"), this.currentItem = null) }, n.prototype.getSubmenu = function (e) { var t = e.find("> .menu__submenu"); return t.length && (this.container.append(t), e.data("submenu", t)), e.data("submenu") }, n.prototype.hasSubmenu = function (e) { return !!this.getSubmenu(e) }, n.prototype.openSubmenu = function (e) { const t = this.getSubmenu(e); var n, s, i; t && (t.addClass("menu__submenu--display"), i = this.element.offset().top - I(window).scrollTop(), n = e.find("> .menu__item-submenu-offset").offset().top - I(window).scrollTop(), e = (s = window.innerHeight) - 40, t.css("maxHeight", e + "px"), e = t.height(), i = Math.min(Math.max(n - i, 0), s - 20 - e - i), t.css("top", i + "px"), t.addClass("menu__submenu--open"), r() ? this.element.offset().left - t.width() < 0 && t.addClass("menu__submenu--reverse") : this.element.offset().left + this.element.width() + t.width() > I("body").innerWidth() && t.addClass("menu__submenu--reverse")) }, n.prototype.closeSubmenu = function (e) { const t = this.getSubmenu(e); if (t) { t.removeClass("menu__submenu--display"), t.removeClass("menu__submenu--open"), t.removeClass("menu__submenu--reverse"); const n = t.find("> .menu").data("menuInstance"); n && n.unsetCurrentItem() } }, I(".menu").each(function () { new n(I(this)) }), i.prototype.toggle = function () { this.isOpen() ? this.close() : this.open() }, i.prototype.onMouseenter = function () { this.element.addClass("indicator--hover"), "hover" === this.trigger && this.open() }, i.prototype.onMouseleave = function () { this.element.removeClass("indicator--hover"), "hover" === this.trigger && this.close() }, i.prototype.onTransitionend = function (e) { this.dropdown.is(e.target) && "visibility" === e.originalEvent.propertyName && !this.isOpen() && this.element.removeClass("indicator--display") }, i.prototype.onClick = function (e) { "click" === this.trigger && (e.cancelable && e.preventDefault(), this.toggle()) }, i.prototype.onGlobalClick = function (e) { this.element.not(I(e.target).closest(".indicator")).length && this.close() }, i.prototype.isOpen = function () { return this.element.is(".indicator--open") }, i.prototype.open = function () { this.element.addClass("indicator--display"), this.element.width(), this.element.addClass("indicator--open"), this.element.find(".search__input").focus(); var e = this.dropdown.offset().top - I(window).scrollTop(), t = window.innerHeight; this.dropdown.css("maxHeight", t - e - 20 + "px") }, i.prototype.close = function () { this.element.removeClass("indicator--open") }, i.prototype.closeImmediately = function () { this.element.removeClass("indicator--open"), this.element.removeClass("indicator--display") }, I(".indicator").each(function () { new i(this) }), I(function () { function e(e) { e.data("departmentsInstance", this), this.element = e, this.container = this.element.find(".departments__submenus-container"), this.linksWrapper = this.element.find(".departments__links-wrapper"), this.body = this.element.find(".departments__body"), this.button = this.element.find(".departments__button"), this.items = this.element.find(".departments__item"), this.mode = this.element.is(".departments--fixed") ? "fixed" : "normal", this.fixedBy = I(this.element.data("departments-fixed-by")), this.fixedHeight = 0, this.currentItem = null, "fixed" === this.mode && this.fixedBy.length && (this.fixedHeight = this.fixedBy.offset().top - this.body.offset().top + this.fixedBy.outerHeight(), this.body.css("height", this.fixedHeight + "px")), this.linksWrapper.on("transitionend", function (e) { "height" === e.originalEvent.propertyName && (I(this).css("height", ""), I(this).closest(".departments").removeClass("departments--transition")) }), this.onButtonClick = this.onButtonClick.bind(this), this.onGlobalClick = this.onGlobalClick.bind(this), this.onMouseenter = this.onMouseenter.bind(this), this.onMouseleave = this.onMouseleave.bind(this), this.onTouchClick = this.onTouchClick.bind(this), this.button.on("click", this.onButtonClick), document.addEventListener("click", this.onGlobalClick, !0), k(document, this.onGlobalClick), this.items.on("mouseenter", this.onMouseenter), this.linksWrapper.on("mouseleave", this.onMouseleave), k(this.items, this.onTouchClick) } e.prototype.onButtonClick = function (e) { e.preventDefault(), this.element.is(".departments--open") ? this.close() : this.open() }, e.prototype.onGlobalClick = function (e) { this.element.not(I(e.target).closest(".departments")).length && this.element.is(".departments--open") && this.close() }, e.prototype.setMode = function (e) { this.mode = e, "normal" === this.mode && (this.element.removeClass("departments--fixed"), this.element.removeClass("departments--open"), this.body.css("height", "auto")), "fixed" === this.mode && (this.element.addClass("departments--fixed"), this.element.addClass("departments--open"), this.body.css("height", this.fixedHeight + "px"), I(".departments__links-wrapper", this.element).css("maxHeight", "")) }, e.prototype.close = function () { if (!this.element.is(".departments--fixed")) { const t = this.element.find(".departments__links-wrapper"); var e = t.height(); t.css("height", e + "px"), this.element.addClass("departments--transition").removeClass("departments--open"), t.height(), t.css("height", ""), t.css("maxHeight", ""), this.unsetCurrentItem() } }, e.prototype.closeImmediately = function () { if (!this.element.is(".departments--fixed")) { const e = this.element.find(".departments__links-wrapper"); this.element.removeClass("departments--open"), e.css("height", ""), e.css("maxHeight", ""), this.unsetCurrentItem() } }, e.prototype.open = function () { const e = this.element.find(".departments__links-wrapper"); var t = e.height(); this.element.addClass("departments--transition").addClass("departments--open"); var n = document.documentElement.clientHeight, s = e[0].getBoundingClientRect(), s = Math.min(e.height(), n - 20 - s.top); e.css("height", t + "px"), e.height(), e.css("maxHeight", s + "px"), e.css("height", s + "px") }, e.prototype.onMouseenter = function (e) { const t = I(e.currentTarget); this.currentItem && t.is(this.currentItem) || (this.unsetCurrentItem(), this.setCurrentItem(t)) }, e.prototype.onMouseleave = function () { this.unsetCurrentItem() }, e.prototype.onTouchClick = function (e) { e = I(e.currentTarget); this.currentItem && this.currentItem.is(e) || this.hasSubmenu(e) && (s(), this.unsetCurrentItem(), this.setCurrentItem(e)) }, e.prototype.setCurrentItem = function (e) { this.unsetCurrentItem(), this.currentItem = e, this.currentItem.addClass("departments__item--hover"), this.openSubmenu(this.currentItem) }, e.prototype.unsetCurrentItem = function () { this.currentItem && (this.closeSubmenu(this.currentItem), this.currentItem.removeClass("departments__item--hover"), this.currentItem = null) }, e.prototype.getSubmenu = function (e) { var t = e.find("> .departments__submenu"); return t.length && (this.container.append(t), e.data("submenu", t)), e.data("submenu") }, e.prototype.hasSubmenu = function (e) { return !!this.getSubmenu(e) }, e.prototype.openSubmenu = function (e) { const t = this.getSubmenu(e); var n, s, i; t && (t.addClass("departments__submenu--open"), n = document.documentElement.clientHeight, t.hasClass("departments__submenu--type--megamenu") && (i = t.offset().top - I(window).scrollTop(), t.css("maxHeight", n - i - 20 + "px")), t.hasClass("departments__submenu--type--menu") && (t.css("maxHeight", n - 20 - Math.min(20, this.body.offset().top - I(window).scrollTop()) + "px"), s = t.height(), e = this.currentItem.offset().top - I(window).scrollTop(), i = this.container.offset().top - I(window).scrollTop(), t.css("top", Math.min(e, n - 20 - s) - i + "px"))) }, e.prototype.closeSubmenu = function (e) { const t = e.data("submenu"); t && (t.removeClass("departments__submenu--open"), t.is(".departments__submenu--type--menu") && t.find("> .menu").data("menuInstance").unsetCurrentItem()) }; var t = I(".departments"); const h = t.length ? new e(t) : null, c = I(".nav-panel--sticky"); if (c.length) { var l = c.data("sticky-mode") ? c.data("sticky-mode") : "alwaysOnTop"; const w = matchMedia("(min-width: 992px)"); var d = h ? h.mode : null; let s = !1, i = !1, o = 0, r = 0, a = function () { return 0 }, u = function () { return 0 }; var m = function () { h && h.closeImmediately(), I(".nav-links").data("navLinksInstance").unsetCurrentItem(), I(".indicator").each(function () { I(this).data("indicatorInstance").closeImmediately() }) }, n = function () { c.addClass("nav-panel--show"), i = !0, I(document).trigger("stroyka.header.sticky.show") }, p = function () { c.removeClass("nav-panel--show"), i = !1, I(document).trigger("stroyka.header.sticky.hide") }, f = function () { var e = window.pageYOffset - r; e < 0 != o < 0 && (o = 0), r = window.pageYOffset, o += e, window.pageYOffset > u() ? (s || (c.addClass("nav-panel--stuck"), c.css("transitionDuration", "0s"), "alwaysOnTop" === l && n(), c.height(), c.css("transitionDuration", ""), s = !0, h && "fixed" === d && h.setMode("normal"), m()), "pullToShow" === l && (o < -10 && !c.hasClass("nav-panel--show") && n(), 25 < o && c.hasClass("nav-panel--show") && (p(), m()))) : window.pageYOffset <= a() && s && (c.removeClass("nav-panel--stuck"), s = !1, p(), h && "fixed" === d && h.setMode("fixed"), m()) }, g = function () { var e, t, n; w.matches ? (o = 0, r = window.pageYOffset, e = c.offset().top, t = e + c.outerHeight(), n = h ? h.body.offset().top + h.body.outerHeight() : 0, h && "fixed" === d && t < n ? a = u = function () { return n } : "alwaysOnTop" === l ? a = u = function () { return e } : (a = function () { return i ? e : t }, u = function () { return t }), window.addEventListener("scroll", f, !!x && { passive: !0 }), f()) : (s && (c.removeClass("nav-panel--stuck"), s = !1, p(), h && "fixed" === d && h.setMode("fixed"), m()), window.removeEventListener("scroll", f, !!x && { passive: !0 })) }; w.addEventListener ? w.addEventListener("change", g) : w.addListener(g), g() } const a = I(".mobile-header--sticky"), u = a.find(".mobile-header__panel"); if (a.length) { var v = a.data("sticky-mode") ? a.data("sticky-mode") : "alwaysOnTop"; const y = matchMedia("(min-width: 992px)"); let t = !1, n = !1, s = 0, i = 0, o = 0, r = 0; var b = function () { a.addClass("mobile-header--show"), n = !0, I(document).trigger("stroyka.header.sticky.show") }, C = function () { a.removeClass("mobile-header--show"), n = !1, I(document).trigger("stroyka.header.sticky.hide") }, _ = function () { var e = window.pageYOffset - i; e < 0 != s < 0 && (s = 0), i = window.pageYOffset, s += e, window.pageYOffset > r ? (t || (a.addClass("mobile-header--stuck"), u.css("transitionDuration", "0s"), "alwaysOnTop" === v && b(), a.height(), u.css("transitionDuration", ""), t = !0), "pullToShow" === v && (window.pageYOffset > o ? (s < -10 && !n && b(), 25 < s && n && C()) : n && C())) : window.pageYOffset <= o && t && (a.removeClass("mobile-header--stuck"), t = !1, C()) }, g = function () { y.matches ? (t && (a.removeClass("mobile-header--stuck"), a.removeClass("mobile-header--show"), t = !1, n = !1, I(document).trigger("stroyka.header.sticky.hide")), window.removeEventListener("scroll", _, !!x && { passive: !0 })) : (s = 0, i = window.pageYOffset, o = a.offset().top, r = o + ("alwaysOnTop" === v ? 0 : a.outerHeight()), window.addEventListener("scroll", _, !!x && { passive: !0 }), _()) }; y.addEventListener ? y.addEventListener("change", g) : y.addListener(g), g() } }), function () { const t = I("body"), n = I(".dropcart--style--offcanvas"); function s() { return "hidden" === window.getComputedStyle(n[0]).visibility } function i() { t.css("overflow", ""), t.css("paddingRight", "") } function o() { var e; e = t.width(), t.css("overflow", "hidden"), t.css("paddingRight", t.width() - e + "px"), n.addClass("dropcart--open") } 0 !== n.length && (I('[data-open="offcanvas-cart"]').on("click", function (e) { e.cancelable && (e.preventDefault(), o()) }), n.find(".dropcart__backdrop, .dropcart__close").on("click", function () { s() && i(), n.removeClass("dropcart--open") }), n.on("transitionend", function (e) { n.is(e.target) && "visibility" === e.originalEvent.propertyName && s() && i() })) }() }) }(jQuery);